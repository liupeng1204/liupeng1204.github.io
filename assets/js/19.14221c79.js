(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{442:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[s._v("#")]),s._v(" http")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("网络协议对应层级")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/network-protocol.png",alt:"img"}})])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("HTTPS与HTTP的一些区别")]),s._v(" "),t("blockquote",[t("p",[s._v("1.HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。"),t("br"),s._v("\n2.HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。"),t("br"),s._v("\n3.HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。"),t("br"),s._v("\n4.HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。")])])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("HTTP2.0和HTTP1.X相比的新特性")]),s._v(" "),t("blockquote",[t("p",[s._v("1."),t("strong",[s._v("新的二进制格式")]),s._v("（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。"),t("br"),s._v("\n2."),t("strong",[s._v("多路复用")]),s._v("（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。"),t("br"),s._v("\n3."),t("strong",[s._v("header压缩")]),s._v("，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。"),t("br"),s._v("\n4."),t("strong",[s._v("服务端推送")]),s._v("（server push），同SPDY一样，HTTP2.0也具有server push功能。")])])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("网页输入一个URL到渲染的过程")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("① 获取"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("地址\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("首先会在浏览器的缓存中查找，是否缓存了"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("，如果有，就直接向该"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("对应的服务器发送请求；如果没有则进行下一步"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("在本地的hosts文件中是否保存了该"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("和其对应的"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("地址，如果保存了，就直接向该"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("对应的服务器发送请求；如果没有则进行下一步；\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("向本地"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("服务器（一般由本地网络接入服务器提供商提供，比如移动）发送"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("请求，本地"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("服务器会首先查询它的缓存记录，如果有就将该域名对应的"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("地址返回给用户，如果没有则进行下一步；\n   首先向根域名服务器发送"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("查询请求，根域名服务器返回给可能保存了该域名的一级域名服务器地址；本地主机再根据返回的地址，向一级域名服务器发送"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("查询请求；"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("一直迭代，直到找到对应的域名存放的服务器，向其发送"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("查询请求，该域名服务器返回该域名对应的"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("地址；\n② 三次握手建立浏览器与服务器的tcp连接\n③ 浏览器向服务器发送http请求，并获取服务器响应信息\n④ 浏览器拿到"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("文件后，根据渲染规则进行渲染：\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("解析"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("，构建"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("树\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("解析"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v("，生成"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v("规则树\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("合并"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("树和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v("规则树，生成render树\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("布局render树\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("绘制render数、树，即绘制页面像素信息\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v("将各层合成，结果呈现在浏览器窗口中。\n⑤ 四次挥手关掉tcp连接\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("数字签名")]),s._v(" "),t("p",[t("a",{attrs:{href:"http://www.youdzone.com/signature.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("What is a Digital Signature?"),t("OutboundLink")],1)])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("http协议中301/302/304的区别")]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("301 Moved Permanently 永久移动。是指请求的资源已被永久的移动到新的URL，返回信息会包括新的URL，浏览器还会自动定向到新的URL。今后任何新的请求都应该使用新的URL来代替。  \n302 Found 临时移动。与301类似。但是资源只是临时被移动。客户端应该继续使用原有的URI  \n304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存所访问过的资源。通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("什么时候会出现304")]),t("br"),s._v("\n如果客户端发送了一个带条件的GET请求已被允许，而文档中的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。即客户端和服务器端只需要传输很少的数据量来做文件的校验，如果文件没有修改过，则不需要返回全量的数据。")]),s._v(" "),t("p",[t("strong",[s._v("301和302的区别")]),t("br"),s._v("\n（1）字面上区别：301永久重定向 302临时重定向。"),t("br"),s._v("\n（2）301比较常用的场景是使用域名跳转。302用来做临时跳转 （例如：未登录的用户访问用户中心重定向到登录页面）")])])])}),[],!1,null,null,null);t.default=e.exports}}]);